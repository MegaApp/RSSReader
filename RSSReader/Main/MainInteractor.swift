//
//  MainInteractor.swift
//  RSSReader
//
//  Created by Izzat on 11/16/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import FeedKit

protocol MainBusinessLogic {
    func getFeeds(request: Main.Feed.Request)
    func getFeeds()
    func deleteFeeds(request: Main.Feed.Request)
}

protocol MainDataStore {
    var mainDelegate: MainBusinessLogic? { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore {
    
    var mainDelegate: MainBusinessLogic?

    fileprivate var disposeBag = DisposeBag()
    var presenter: MainPresentationLogic?
    var worker: MainWorker?
    var coreDataWorker: MainCoreDataWorker?
    let subject: PublishSubject<URL>?
    
    init() {
        worker = MainWorker()
        subject = PublishSubject<URL>()
        subject?.flatMap({self.worker!.getFeeds(url: $0)})
            .observeOn(MainScheduler.instance)
            .subscribe(onNext: { rssFeed in
                let response = Main.Feed.Response(feed: rssFeed)
                self.presenter?.presentFeeds(response: response)
            }, onError: {error in
                let response = Main.Error.Response(message: error.localizedDescription)
                self.presenter?.presentError(response: response)
            })
            .disposed(by: disposeBag)
        setMainData()
    }
    
    func getFeeds(request: Main.Feed.Request) {
        subject?.onNext(request.url)
    }
    
    func getFeeds() {
        coreDataWorker = MainCoreDataWorker()
        coreDataWorker?.getAllRSSChannels()
            .observeOn(MainScheduler.instance)
            .subscribe(onNext: { channels in
                for channel in channels {
                    if let urlSting = channel.url,
                        let url = URL(string: urlSting) {
                        self.subject?.onNext(url)
                    }
                }
            }, onError: { error in
                let response = Main.Error.Response(message: error.localizedDescription)
                self.presenter?.presentError(response: response)
            })
            .disposed(by: disposeBag)
    }
    
    func deleteFeeds(request: Main.Feed.Request) {
        let response = Main.Feed.Delete(url: request.url.absoluteString)
        self.presenter?.deleteFeeds(response: response)
    }
    
    func setMainData() {
        mainDelegate = self
    }
}
