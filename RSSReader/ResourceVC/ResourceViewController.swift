//
//  ResourceViewController.swift
//  RSSReader
//
//  Created by Izzat on 11/17/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol ResourceDisplayLogic: class {
    func displayRssResource(viewModel: Resource.RssResource.ViewModel)
    func displayRssResources(viewModel: [Resource.RssResource.ViewModel])
    func displayError(viewModel: Resource.Error.ViewModel)
}

class ResourceViewController: UITableViewController, ResourceDisplayLogic {
    
    var resources = [Resource.RssResource.ViewModel]()
    var interactor: ResourceBusinessLogic?
    var router: (NSObjectProtocol & ResourceRoutingLogic & ResourceDataPassing)?
    
    @IBOutlet weak var textField: UITextField!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ResourceInteractor()
        let presenter = ResourcePresenter()
        let router = ResourceRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.getAllResources()
    }
    
    @IBAction func addButton(_ sender: Any) {
        let request = Resource.RssResource.Request(urlString: textField.text ?? "", title: "", logoUrlString: "")
        textField.text = nil
        interactor?.addRssResource(request: request)
    }
    
    func displayRssResources(viewModel: [Resource.RssResource.ViewModel]) {
        resources = viewModel
        tableView.reloadData()
    }
    
    func displayRssResource(viewModel: Resource.RssResource.ViewModel) {
        resources.insert(viewModel, at: 0)
        tableView.insertRows(at: [IndexPath(row: 0, section: 0)], with: .bottom)
    }
    
    func displayError(viewModel: Resource.Error.ViewModel) {
        let alert = UIAlertController(title: "Ошибка", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}

extension ResourceViewController {
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Каналы"
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return resources.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "resourceCell", for: indexPath)
        let resource = resources[indexPath.item]
        cell.textLabel?.text = resource.title
        if let urlString = resource.logoUrl,
            let url = URL(string: urlString) {
            let avatarResource = ImageResource(downloadURL: url)
            let processor = ResizingImageProcessor(referenceSize: cell.imageView!.frame.size, mode: .aspectFill)
            cell.imageView?.kf.setImage(with: avatarResource, placeholder: Image(named: "ic_rss"), options: [.processor(processor)])
        } else {
            cell.imageView?.image = Image(named: "ic_rss")
        }
        return cell
    }
    
    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    override func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let deleteAction = UITableViewRowAction(style: .destructive, title: "Удалить", handler: { (action, indexPath) in
            let resource = self.resources[indexPath.row]
            self.resources.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .bottom)
            let request = Resource.RssResource.Request(urlString: resource.urlString, title: resource.title, logoUrlString: resource.logoUrl)
            self.interactor?.deleteRssResource(request: request)
        })
        return [deleteAction]
    }
}

