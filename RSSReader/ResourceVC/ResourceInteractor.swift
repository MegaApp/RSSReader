//
//  ResourceInteractor.swift
//  RSSReader
//
//  Created by Izzat on 11/17/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol ResourceBusinessLogic {
    func addRssResource(request: Resource.RssResource.Request)
    func deleteRssResource(request: Resource.RssResource.Request)
    func getAllResources()
}

protocol ResourceDataStore {
    var mainDelegate: MainBusinessLogic? { get set }
}

class ResourceInteractor: ResourceBusinessLogic, ResourceDataStore {
    
    fileprivate var disposeBag = DisposeBag()
    
    var mainDelegate: MainBusinessLogic?
    
    var presenter: ResourcePresentationLogic?
    var apiWorker: ResourceAPIWorker?
    var coreDataWorker: ResourceCoreDataWorker?
    
    func getAllResources() {
        coreDataWorker = ResourceCoreDataWorker()
        coreDataWorker?.getAllRSSChannels()
            .observeOn(MainScheduler.instance)
            .subscribe(onNext: { channels in
                let response = Resource.RssResources.Response(rssChannels: channels)
                self.presenter?.presentRssResources(response: response)
            }, onError: { error in
                let response = Resource.Error.Response(message: error.localizedDescription)
                self.presenter?.presentError(response: response)
            })
            .disposed(by: disposeBag)
    }
    
    func deleteRssResource(request: Resource.RssResource.Request) {
        coreDataWorker = ResourceCoreDataWorker()
        coreDataWorker?.deleteData(url: request.urlString)
            .observeOn(MainScheduler.instance)
            .subscribe(onNext: { url in
                let mainRequest = Main.Feed.Request(url: URL(string: url)!)
                self.mainDelegate?.deleteFeeds(request: mainRequest)
            }, onError: { error in
                let response = Resource.Error.Response(message: error.localizedDescription)
                self.presenter?.presentError(response: response)
            })
            .disposed(by: disposeBag)
    }
    
    func addRssResource(request: Resource.RssResource.Request) {
        apiWorker = ResourceAPIWorker()
        coreDataWorker = ResourceCoreDataWorker()
        guard let url = URL(string: request.urlString) else {
            let response = Resource.Error.Response(message: "Не правельный адрес")
            self.presenter?.presentError(response: response)
            return
        }
        apiWorker?.chackRssResource(url: url)
            .observeOn(MainScheduler.instance)
            .flatMap({response  -> Observable<Resource.RssResource.Response> in
                let request = Resource.RssResource.Request(urlString: response.url, title: response.title, logoUrlString: response.logoUrl)
                return self.coreDataWorker!.addChannel(channel: request)
            })
            .observeOn(MainScheduler.instance)
            .subscribe(onNext: { response in
                self.presenter?.presentRssResource(response: response)
                let mainRequest = Main.Feed.Request(url: URL(string: response.url)!)
                self.mainDelegate?.getFeeds(request: mainRequest)
            }, onError: { error in
                let response = Resource.Error.Response(message: error.localizedDescription)
                self.presenter?.presentError(response: response)
            })
            .disposed(by: disposeBag)
    }
}
