//
//  ResourcePresenter.swift
//  RSSReader
//
//  Created by Izzat on 11/17/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ResourcePresentationLogic {
    func presentRssResource(response: Resource.RssResource.Response)
    func presentError(response: Resource.Error.Response)
    func presentRssResources(response: Resource.RssResources.Response)
}

class ResourcePresenter: ResourcePresentationLogic {

    weak var viewController: ResourceDisplayLogic?
    
    func presentError(response: Resource.Error.Response) {
        let viewModel = Resource.Error.ViewModel(message: response.message)
        viewController?.displayError(viewModel: viewModel)
    }
    
    func presentRssResource(response: Resource.RssResource.Response) {
        let viewModel = Resource.RssResource.ViewModel(title: response.title, logoUrl: response.logoUrl, urlString: response.url)
        viewController?.displayRssResource(viewModel: viewModel)
    }
    
    func presentRssResources(response: Resource.RssResources.Response) {
        var viewModel = [Resource.RssResource.ViewModel]()
        for rssChannel in response.rssChannels {
            if let title = rssChannel.name,
                let url = rssChannel.url {
                viewModel.append(Resource.RssResource.ViewModel(title: title, logoUrl: rssChannel.logo_url, urlString: url))
            }
        }
        viewController?.displayRssResources(viewModel: viewModel)
    }
}
