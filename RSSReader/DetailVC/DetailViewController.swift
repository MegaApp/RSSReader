//
//  DetailViewController.swift
//  RSSReader
//
//  Created by Izzat on 11/19/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol DetailDisplayLogic: class {
    func displayItem(viewModel: Detail.Item.ViewModel)
    func displayError(viewModel: Detail.Item.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var readMoreButton: UIButton!
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.getItem()
    }
    
    @IBAction func readMoreButton(_ sender: Any) {
        router?.openLinkInBrowser()
    }
    
    func displayItem(viewModel: Detail.Item.ViewModel) {
        title = viewModel.title?.string
        titleLabel.attributedText = viewModel.title
        descriptionLabel.text = viewModel.description
        dateLabel.text = viewModel.pubDate
        readMoreButton.isHidden = (viewModel.link ?? "").isEmpty
        if let urlString = viewModel.imageUrl,
            let url = URL(string: urlString) {
            let imageResource = ImageResource(downloadURL: url)
            imageView.kf.setImage(with: imageResource, placeholder: Image(named: "picture"))
        }
    }
    
    func displayError(viewModel: Detail.Item.ViewModel) {
        let alert = UIAlertController(title: "Ошибка", message: viewModel.error!, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}
