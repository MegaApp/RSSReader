//
//  MainViewController.swift
//  RSSReader
//
//  Created by Izzat on 11/16/18.
//  Copyright (c) 2018 Izzat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FeedKit

protocol MainDisplayLogic: class {
    func displayFeed(viewModel: Main.Feed.ViewModel)
    func displayFeeds(viewModel: Main.Feeds.ViewModel)
    func displayError(viewModel: Main.Errors.ViewModel)
    func deleteFeed(viewModel: Main.Feed.Delete)
    func routToSourceVC()
}

class MainViewController: UITableViewController, MainDisplayLogic {
    
    private var feeds = [RSSFeed]()
    private var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI(){
        refreshControl = UIRefreshControl()
        refreshControl?.addTarget(self, action: #selector(handleRefresh(refreshControl:)), for: UIControl.Event.valueChanged)
        tableView.refreshControl = refreshControl
        tableView.separatorStyle = .none
        tableView.estimatedRowHeight = 314
        tableView.rowHeight = UITableView.automaticDimension
        
        if #available(iOS 11.0, *) {
            self.navigationController?.navigationBar.prefersLargeTitles = true
        }
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        getFeeds()
    }
    
    @objc func handleRefresh(refreshControl: UIRefreshControl){
        getFeeds()
    }
    
    func getFeeds() {
        refreshControl?.beginRefreshing()
        feeds.removeAll()
        tableView.reloadData()
        interactor?.getFeeds()
    }
    
    func displayError(viewModel: Main.Errors.ViewModel) {
        refreshControl?.endRefreshing()
        let alert = UIAlertController(title: "Ошибка", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
    
    func displayFeed(viewModel: Main.Feed.ViewModel) {
        refreshControl?.endRefreshing()
        feeds.insert(viewModel.rssFeed, at: 0)
        self.tableView.insertSections([0], with: .top)
    }
    
    func displayFeeds(viewModel: Main.Feeds.ViewModel) {
        refreshControl?.endRefreshing()
        feeds = viewModel.feeds
        self.tableView.reloadData()
    }
    
    func deleteFeed(viewModel: Main.Feed.Delete) {
        if let feed = feeds.filter({$0.link == viewModel.url}).first,
            let index = feeds.firstIndex(of: feed) {
            feeds.remove(at: index)
            tableView.deleteSections([index], with: .bottom)
        }
    }
    
    func routToSourceVC() {
        refreshControl?.endRefreshing()
        router?.routeToSourceVC(segue: nil)
    }
}

extension MainViewController {
    override func numberOfSections(in tableView: UITableView) -> Int {
        return feeds.count
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return feeds[section].items?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return feeds[section].title
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! MainTableViewCell
        cell.update(item: feeds[indexPath.section].items?[indexPath.item])
        return cell
    }
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        guard let item = feeds[indexPath.section].items?[indexPath.item] else {
            return indexPath
        }
        interactor?.setItemToPass(item: item)
        return indexPath
    }
}
